{
  "print to console": {
    "prefix": "extension.author",
    "body": ["$1", "console.log('Authored by Maye Edwin.');", "$1"],
    "description": "Hello from Maye!"
  },
  "service worker": {
    "prefix": "basic.service.worker",
    "body": [
      "$1",
      "// Basic service worker...",
      "self.addEventListener('fetch', (event) => {",
      " event.respondWith(caches.open('cache').then((cache) => {",
      "  return cache.match(event.request).then((response) => {",
      "   console.log(\"cache request: \" + event.request.url);",
      "   const fetchPromise = fetch(event.request).then((networkResponse) => {",
      "   // If we got a response from the cache, update the cache...",
      "   console.log(\"fetch completed: \" + event.request.url, networkResponse);",
      "   if (networkResponse) {",
      "    console.debug(\"updated cached page: \" + event.request.url, networkResponse);",
      "    cache.put(event.request, networkResponse.clone());}",
      "   return networkResponse;",
      "  }, (event) => {",
      "  // Rejected promise - just ignore it, we're offline...",
      "  console.log(\"Error in fetch()\", event);",
      "  event.waitUntil(",
      "   // Our 'cache' here is named *cache* in the caches.open()...",
      "   caches.open('cache').then((cache) => {",
      "    return cache.addAll",
      "      ([",
      "      // List : cache.addAll(), takes a list of URLs, then fetches them from...",
      "      // The server and adds the response to the cache...",
      "      './index.html', // cache your index page",
      "      './assets/css/app.main.css', // cache app.main css",
      "      './images/*', // cache all images",
      "      './app.webmanifest',",
      "      // External url fetch, twitter's as an example...",
      "      'https://platform.twitter.com/widgets.js',",
      "     ]);",
      "    }) );",
      "   });",
      "   // Respond from the cache, or the network...",
      "   return response || fetchPromise;",
      " });",
      " }));",
      "});",
      "$1",
      "// Always updating i.e latest version available...",
      "self.addEventListener('install', (event) => {",
      "   self.skipWaiting();",
      "   console.log(\"Latest version installed!\");",
      "});",
      "$1"
    ],
    "description": "Basic Service Worker"
  },
  "precache for node": {
    "prefix": "workbox.precache",
    "body": [
      "$1",
      "module.exports = {",
      "\"globDirectory\": \"build/\", // the base directory you wish to match globPatterns against,",
      "\"globPatterns\": [",
      "// Add more assets or resources to cache...",
      "\"**/*.css\",",
      "\"index.html\",",
      "\"app.webmanifest\",",
      "// The path and filename of the Service Worker file that will be created by the build process...",
      "\"swSrc\": \"src/service-worker.js\",",
      "\"globIgnores\": [",
      "\"../sw-config.js\"",
      "$1",
      "]",
      "};"
    ],
    "description": "Workbox precache"
  },
  "workbox": {
    "prefix": "workbox.cdn",
    "body": [
      " importScripts('https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js');",
      " if (workbox) {",
      "   console.log('[ Hello ] from Maye of pwafire.org');",
      "const wkb = {",
      "  ...workbox.core,",
      "  ...workbox.routing,",
      "  ...workbox.precaching,",
      "  ...workbox.strategies,",
      "  ...workbox.cacheableResponse,",
      "  ...workbox.expiration",
      "}",
      "const {",
      "  clientsClaim,",
      "  skipWaiting,",
      "  cacheNames,",
      "  setCacheNameDetails,",
      "  setCatchHandler,",
      "  NavigationRoute,",
      "  registerRoute,",
      "  precacheAndRoute,",
      "  createHandlerBoundToURL,",
      "  matchPrecache,",
      "  NetworkFirst,",
      "  NetworkOnly,",
      "  CacheFirst,",
      "  CacheOnly,",
      "  StaleWhileRevalidate,",
      "  CacheExpiration,",
      "  ExpirationPlugin,",
      "  CacheableResponsePlugin",
      "  } = wkb;",
      "$2",
      "$2",
      "     /* Here is your workbox workspace.",
      "          Remember to emove all unused modules. */",
      "$2",
      "$2",
      "   skipWaiting();",
      "   clientsClaim();",
      " } else {",
      "   console.log('Boo! Workbox failed to load ðŸ˜¬');",
      " }"
    ],
    "description": "Import workbox cnd version"
  },
  "workbox-node": {
    "prefix": "workbox.packages",
    "body": [
      "import { registerRoute } from 'workbox-routing';",
      "import { CacheFirst, CacheOnly, NetWorkFirst, NetworkOnly, StaleWhileRevalidate } from 'workbox-strategies';",
      "import { Plugin as ExpirationPlugin } from 'workbox-expiration';",
      "import { CacheableResponsePlugin } from 'workbox-cacheable-response';",
      "import * as googleAnalytics from 'workbox-google-analytics';"
    ],
    "description": "Import workbox packages"
  },
  "workbox-register-route": {
    "prefix": "workbox.registerRoute",
    "body": [
      "// Cache routes...",
      "registerRoute(",
      "// Check to see if the request is a navigation to a new page...",
      "({ request }) => request.mode === 'navigate',",
      "// Use a Network First caching strategy...",
      " new NetworkFirst({",
      "   // Put all cached files in a cache named 'pages'...",
      "   cacheName: 'pages',",
      "   plugins: [",
      "      // Ensure that only requests that result in a 200 status are cached...",
      "      new CacheableResponsePlugin({",
      "         statuses: [200]",
      "      }),",
      "      new ExpirationPlugin({",
      "         maxEntries: 20,",
      "         maxAgeSeconds: 1 * 24 * 60 * 60 // 1 Day",
      "      }),",
      "   ],",
      " })",
      ");"
    ],
    "description": "Register route to cache"
  },
  "workbox-google-analytics": {
    "prefix": "workbox.analytics",
    "body": ["googleAnalytics.initialize();"],
    "description": "Enable workbox google analytics for npm "
  },
  "StaleWhileRevalidate": {
    "prefix": "workbox.StaleWhileRevalidate",
    "body": ["StaleWhileRevalidate"],
    "description": "Stale While Revalidate"
  },
  "CacheFirst": {
    "prefix": "workbox.CacheFirst",
    "body": ["CacheFirst"],
    "description": "Cache First (Cache Falling Back to Network)"
  },
  "NetworkFirst": {
    "prefix": "workbox.NetworkFirst",
    "body": ["NetworkFirst"],
    "description": "Network First (Network Falling Back to Cache)"
  },
  "NetworkOnly": {
    "prefix": "workbox.NetworkOnly",
    "body": ["NetworkOnly"],
    "description": "Network Only"
  },
  "CacheOnly": {
    "prefix": "workbox.CacheOnly",
    "body": ["CacheOnly"],
    "description": "Cache Only"
  },
  "workbox debug": {
    "prefix": "workbox.debug",
    "body": ["$1", "workbox.setConfig({", "debug:true", "});", "$1"],
    "description": "workbox set config for debug or production builds"
  },
  "workbox.cacheableResponse": {
    "prefix": "workbox cacheable response",
    "body": [
      "$1",
      "new workbox.cacheableResponse.Plugin({",
      " statuses: [0, 200],",
      " })",
      "$1"
    ],
    "description": "caching based on status codes"
  },
  "cache-images": {
    "prefix": "workbox.assets",
    "body": [
      "// Cache CSS, JS, and Web Worker requests...",
      "registerRoute(",
      "//  Check to see if the request's destination is style for css, script , or worker...",
      "({ request }) => request.destination === 'style' ||",
      "                 request.destination === 'script' ||",
      "                 request.destination === 'worker',",
      "// Use a Stale While Revalidate caching strategy...",
      " new StaleWhileRevalidate({",
      "   // Put all cached files in a cache named 'assets'...",
      "   cacheName: 'assets',",
      "   plugins: [",
      "      // Ensure that only requests that result in a 200 status are cached...",
      "      new CacheableResponsePlugin({",
      "         statuses: [200]",
      "      }),",
      "      new ExpirationPlugin({",
      "         maxEntries: 20,",
      "         maxAgeSeconds: 1 * 24 * 60 * 60 // 1 Day",
      "      }),",
      "   ],",
      " })",
      ");"
    ],
    "description": "Cache assets"
  },
  "cache-assets": {
    "prefix": "workbox.images",
    "body": [
      "// Cache images requests...",
      "registerRoute(",
      "// Check to see if the request's destination is style for an image...",
      "({ request }) => request.destination === 'image',",
      "// Use a Cache First caching strategy...",
      " new CacheFirst({",
      "   // Put all cached files in a cache named 'images'...",
      "   cacheName: 'images',",
      "   plugins: [",
      "      // Ensure that only requests that result in a 200 status are cached...",
      "      new CacheableResponsePlugin({",
      "         statuses: [200]",
      "      }),",
      "      new ExpirationPlugin({",
      "         maxEntries: 20,",
      "         maxAgeSeconds: 1 * 24 * 60 * 60 // 1 Day",
      "      }),",
      "   ],",
      " })",
      ");"
    ],
    "description": "Cache images"
  },
  "cache requests from external origins": {
    "prefix": "workbox.external",
    "body": [
      "// Cache resources from external origins say bootstrap for 30 days",
      "workbox.routing.registerRoute(",
      " 'https://fonts.googleapis.com/css?family=Product%20Sans',",
      " new CacheFirst({",
      "  cacheName: 'external-origins',",
      "  plugins: [",
      "   new CacheableResponsePlugin({",
      "    statuses: [0, 200],",
      "   }),",
      "   new ExpirationPlugin({",
      "    maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days",
      "   }),",
      "  ],",
      " })",
      ");"
    ],
    "description": "Cache requests from external origins"
  }
}
